{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Astrophotography/Cameras/","title":"Cameras","text":""},{"location":"Astrophotography/Cameras/#dedicated-astrophotography-cameras","title":"Dedicated Astrophotography Cameras","text":"<ul> <li> <p>ZWO ASI2600MM Pro ($2500)</p> <ul> <li>https://astronomy-imaging-camera.com/product/asi2600mm-pro-mono</li> <li>Monochrome, full-frame CMOS camera</li> <li>Paired best with narrowband filters</li> </ul> </li> <li> <p>ZWO ASI2400MC Pro ($3500)</p> <ul> <li>https://astronomy-imaging-camera.com/product/asi2400mc-pro</li> <li>Color camera with full-frame sensor</li> </ul> </li> <li> <p>ZWO ASI462MC ($250)</p> <ul> <li>https://astronomy-imaging-camera.com/product/asi462mccolor</li> <li>Essentially a guide camera with small sensor, but ideal for planets</li> <li>Color planetary camera</li> </ul> </li> </ul>"},{"location":"Astrophotography/Cameras/#dslrs","title":"DSLRs","text":"<ul> <li>Canon EOS Ra ($2500)<ul> <li>https://www.usa.canon.com/internet/portal/us/home/products/details/cameras/eos-dslr-and-mirrorless-cameras/mirrorless/eos-ra</li> </ul> </li> </ul>"},{"location":"Astrophotography/Dual-Narrowband-Filters/","title":"Dual Narrowband Filters","text":"<p>Reference: Dual Narrowband Filters Shootout: Optolong L-eNhance vs. Antlia ALP-T vs. Optolong L-eXtreme</p>"},{"location":"Astrophotography/Dual-Narrowband-Filters/#overview","title":"Overview","text":"<ul> <li>Used to photograph emission nebulae from light-polluted cities using color cameras (DSLRs or dedicated astrophotography cameras)</li> <li>Emission nebulae are nebulae that emit their own light from ionized atoms associated with the different gases in the gas clouds (hydrogen, oxygen, and sulfur)</li> <li>These clouds of gas emit very specific wavelengths of light that filters can be designed to pass</li> <li>Isolate light from emission nebulae, specifically the O3 and H-alpha emission line</li> <li>Pass light at specific parts of the visible spectrum</li> <li>How much of the light they pass is called the band pass</li> <li>Anything not included in the band pass is blocked</li> <li>Also work for blocking light pollution</li> </ul>"},{"location":"Astrophotography/Dual-Narrowband-Filters/#what-they-are-not-good-for","title":"What they are NOT good for","text":"<ul> <li>Anything other than emission nebulae</li> <li>Natural star color</li> <li>Reflection nebulae</li> <li>Other galaxies (might be possible if the galaxy has a lot of emission nebulae like M33)</li> <li>Galaxies are typically taken with broadband filters, not narrowband filters</li> </ul>"},{"location":"Astrophotography/Dual-Narrowband-Filters/#popular-filters","title":"Popular Filters","text":"<ul> <li>Optolong L-Enhance ($229)</li> <li>Optolong L-Extreme ($309)</li> <li>Antlia ALP-T ($380)</li> </ul>"},{"location":"Astrophotography/Dual-Narrowband-Filters/#spectral-measurement","title":"Spectral Measurement","text":"<ul> <li>All three filters are well centered on the emission line, but the more expensive filters have the tighter band passes</li> </ul>"},{"location":"Astrophotography/Telescopes/","title":"Telescopes","text":""},{"location":"Astrophotography/Telescopes/#refractors","title":"Refractors","text":"<ul> <li> <p>Sky-watcher Esprit 100 ($2600)</p> </li> <li> <p>https://www.skywatcherusa.com/products/esprit-100mm-ed-triplet-apo-refractor</p> </li> <li>Triplet APO Refractor</li> <li>550 mm focal length (mid-range targets)</li> <li> <p>Objects</p> <ul> <li>Seagull Nebula</li> <li>Pelican Nebula</li> <li>North American Nebula</li> </ul> </li> <li> <p>Radian 61 ($1000)</p> </li> <li> <p>https://optcorp.com/products/radian-61-telescope</p> </li> <li>Triplet APO Refractor</li> <li>275 mm focal length at f/4.5</li> <li>Canon EOS Ra w/ multiband-pass narrowband filter is the sweet spot</li> <li> <p>Objects</p> <ul> <li>Eagle Nebula</li> </ul> </li> <li> <p>William Optics Redcat 71 ($1700)</p> </li> <li>https://optcorp.com/collections/william-optics-telescopes/products/william-optics-redcat-71-apo-telescope-red</li> <li>Petzval APO</li> <li>Ultra flat, well-corrected imaging APO that was designed for widefield deepsky targets</li> </ul>"},{"location":"Astrophotography/Telescopes/#schmidt-cassegrain","title":"Schmidt-Cassegrain","text":"<ul> <li>Celestron EdgeHD 11 ($3700)</li> <li>https://www.celestron.com/products/edgehd-11-optical-tube-assembly-cge-dovetail</li> <li>Long focal length (2800 mm) makes it good for small objects</li> <li>Objects<ul> <li>Messier 106</li> <li>Sunflower Galaxy</li> </ul> </li> </ul>"},{"location":"Coding/Go/","title":"Go","text":"<p>Adding filename:</p> main.go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"hello world\")\n}\n</code></pre> <p>Adding line numbers:</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype base struct {\n    num int\n}\n\nfunc (b base) describe() string {\n    return fmt.Sprintf(\"base with num=%v\", b.num)\n}\n\ntype container struct {\n    base\n    str string\n}\n\nfunc main() {\n\n    co := container{\n        base: base{\n            num: 1,\n        },\n        str: \"some name\",\n    }\n\n    fmt.Printf(\"co={num: %v, str: %v}\\n\", co.num, co.str)\n\n    fmt.Println(\"also num:\", co.base.num)\n\n    fmt.Println(\"describe:\", co.describe())\n\n    type describer interface {\n        describe() string\n    }\n\n    var d describer = co\n    fmt.Println(\"describer:\", d.describe())\n}\n</code></pre> <p>Highlighting certain lines:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n\n    c1 := make(chan string, 1)\n    go func() {\n        time.Sleep(2 * time.Second)\n        c1 &lt;- \"result 1\"\n    }()\n\n    select {\n    case res := &lt;-c1:\n        fmt.Println(res)\n    case &lt;-time.After(1 * time.Second):\n        fmt.Println(\"timeout 1\")\n    }\n\n    c2 := make(chan string, 1)\n    go func() {\n        time.Sleep(2 * time.Second)\n        c2 &lt;- \"result 2\"\n    }()\n    select {\n    case res := &lt;-c2:\n        fmt.Println(res)\n    case &lt;-time.After(3 * time.Second):\n        fmt.Println(\"timeout 2\")\n    }\n}\n</code></pre>"},{"location":"Coding/Rust/","title":"Rust","text":"<pre><code>// This is a comment, and is ignored by the compiler.\n// You can test this code by clicking the \"Run\" button over there -&gt;\n// or if you prefer to use your keyboard, you can use the \"Ctrl + Enter\"\n// shortcut.\n\n// This code is editable, feel free to hack it!\n// You can always return to the original code by clicking the \"Reset\" button -&gt;\n\n// This is the main function.\nfn main() {\n    // Statements here are executed when the compiled binary is called.\n\n    // Print text to the console.\n    println!(\"Hello World!\");\n}\n</code></pre> <pre><code>// Unlike C/C++, there's no restriction on the order of function definitions\nfn main() {\n    // We can use this function here, and define it somewhere later\n    fizzbuzz_to(100);\n}\n\n// Function that returns a boolean value\nfn is_divisible_by(lhs: u32, rhs: u32) -&gt; bool {\n    // Corner case, early return\n    if rhs == 0 {\n        return false;\n    }\n\n    // This is an expression, the `return` keyword is not necessary here\n    lhs % rhs == 0\n}\n\n// Functions that \"don't\" return a value, actually return the unit type `()`\nfn fizzbuzz(n: u32) -&gt; () {\n    if is_divisible_by(n, 15) {\n        println!(\"fizzbuzz\");\n    } else if is_divisible_by(n, 3) {\n        println!(\"fizz\");\n    } else if is_divisible_by(n, 5) {\n        println!(\"buzz\");\n    } else {\n        println!(\"{}\", n);\n    }\n}\n\n// When a function returns `()`, the return type can be omitted from the\n// signature\nfn fizzbuzz_to(n: u32) {\n    for n in 1..=n {\n        fizzbuzz(n);\n    }\n}\n</code></pre>"}]}